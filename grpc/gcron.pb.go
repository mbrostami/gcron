// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gcron.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Task struct {
	FLock                bool                 `protobuf:"varint,1,opt,name=FLock,proto3" json:"FLock,omitempty"`
	FOverride            string               `protobuf:"bytes,2,opt,name=FOverride,proto3" json:"FOverride,omitempty"`
	FDelay               int32                `protobuf:"varint,3,opt,name=FDelay,proto3" json:"FDelay,omitempty"`
	Pid                  int32                `protobuf:"varint,4,opt,name=Pid,proto3" json:"Pid,omitempty"`
	GUID                 string               `protobuf:"bytes,5,opt,name=GUID,proto3" json:"GUID,omitempty"`
	UID                  int32                `protobuf:"varint,6,opt,name=UID,proto3" json:"UID,omitempty"`
	Parent               string               `protobuf:"bytes,7,opt,name=Parent,proto3" json:"Parent,omitempty"`
	Hostname             string               `protobuf:"bytes,8,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Username             string               `protobuf:"bytes,9,opt,name=Username,proto3" json:"Username,omitempty"`
	Command              string               `protobuf:"bytes,10,opt,name=Command,proto3" json:"Command,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,11,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,12,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	ExitCode             int32                `protobuf:"varint,13,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	Output               string               `protobuf:"bytes,14,opt,name=Output,proto3" json:"Output,omitempty"`
	SystemTime           *timestamp.Timestamp `protobuf:"bytes,15,opt,name=SystemTime,proto3" json:"SystemTime,omitempty"`
	UserTime             *timestamp.Timestamp `protobuf:"bytes,16,opt,name=UserTime,proto3" json:"UserTime,omitempty"`
	Success              bool                 `protobuf:"varint,17,opt,name=Success,proto3" json:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd548e04c98879c7, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetFLock() bool {
	if m != nil {
		return m.FLock
	}
	return false
}

func (m *Task) GetFOverride() string {
	if m != nil {
		return m.FOverride
	}
	return ""
}

func (m *Task) GetFDelay() int32 {
	if m != nil {
		return m.FDelay
	}
	return 0
}

func (m *Task) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Task) GetGUID() string {
	if m != nil {
		return m.GUID
	}
	return ""
}

func (m *Task) GetUID() int32 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *Task) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Task) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Task) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Task) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Task) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Task) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Task) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *Task) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Task) GetSystemTime() *timestamp.Timestamp {
	if m != nil {
		return m.SystemTime
	}
	return nil
}

func (m *Task) GetUserTime() *timestamp.Timestamp {
	if m != nil {
		return m.UserTime
	}
	return nil
}

func (m *Task) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Task)(nil), "grpc.Task")
}

func init() {
	proto.RegisterFile("gcron.proto", fileDescriptor_fd548e04c98879c7)
}

var fileDescriptor_fd548e04c98879c7 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x5f, 0x6b, 0xd4, 0x40,
	0x10, 0x37, 0xbd, 0xdc, 0xbf, 0x39, 0x5b, 0xeb, 0x22, 0x65, 0x09, 0xa2, 0x47, 0x9f, 0xee, 0x29,
	0x85, 0x2a, 0xa2, 0xbe, 0xd9, 0xf6, 0x4e, 0x0b, 0x07, 0x2d, 0xc9, 0xd5, 0xf7, 0x6d, 0x32, 0x86,
	0xa5, 0x49, 0x36, 0xec, 0x6e, 0xd4, 0xfa, 0x81, 0xfc, 0x58, 0x7e, 0x16, 0xd9, 0xd9, 0xe6, 0x5a,
	0x2c, 0x78, 0x0f, 0xf7, 0x36, 0xbf, 0x3f, 0x33, 0xb3, 0x33, 0xcc, 0xc2, 0xa4, 0xc8, 0xb4, 0xaa,
	0xe3, 0x46, 0x2b, 0xab, 0x58, 0x58, 0xe8, 0x26, 0x8b, 0x5e, 0x15, 0x4a, 0x15, 0x25, 0x1e, 0x11,
	0x77, 0xdd, 0x7e, 0x3b, 0xfa, 0xa1, 0x45, 0xd3, 0xa0, 0x36, 0xde, 0x15, 0xbd, 0xfe, 0x57, 0xb7,
	0xb2, 0x42, 0x63, 0x45, 0xd5, 0x78, 0xc3, 0xe1, 0xef, 0x10, 0xc2, 0x95, 0x30, 0x37, 0xec, 0x05,
	0xf4, 0x17, 0x4b, 0x95, 0xdd, 0xf0, 0x60, 0x1a, 0xcc, 0x46, 0x89, 0x07, 0xec, 0x25, 0x8c, 0x17,
	0x17, 0xdf, 0x51, 0x6b, 0x99, 0x23, 0xdf, 0x99, 0x06, 0xb3, 0x71, 0x72, 0x4f, 0xb0, 0x03, 0x18,
	0x2c, 0xce, 0xb0, 0x14, 0xb7, 0xbc, 0x37, 0x0d, 0x66, 0xfd, 0xe4, 0x0e, 0xb1, 0x7d, 0xe8, 0x5d,
	0xca, 0x9c, 0x87, 0x44, 0xba, 0x90, 0x31, 0x08, 0x3f, 0x5f, 0x9d, 0x9f, 0xf1, 0x3e, 0x95, 0xa0,
	0xd8, 0xb9, 0x1c, 0x35, 0xf0, 0x2e, 0xc7, 0x1c, 0xc0, 0xe0, 0x52, 0x68, 0xac, 0x2d, 0x1f, 0x92,
	0xef, 0x0e, 0xb1, 0x08, 0x46, 0x5f, 0x94, 0xb1, 0xb5, 0xa8, 0x90, 0x8f, 0x48, 0x59, 0x63, 0xa7,
	0x5d, 0x19, 0xd4, 0xa4, 0x8d, 0xbd, 0xd6, 0x61, 0xc6, 0x61, 0x78, 0xaa, 0xaa, 0x4a, 0xd4, 0x39,
	0x07, 0x92, 0x3a, 0xc8, 0xde, 0xc3, 0x38, 0xb5, 0x42, 0xdb, 0x95, 0xac, 0x90, 0x4f, 0xa6, 0xc1,
	0x6c, 0x72, 0x1c, 0xc5, 0x7e, 0x57, 0x71, 0xb7, 0xab, 0x78, 0xd5, 0xed, 0x2a, 0xb9, 0x37, 0xb3,
	0xb7, 0x30, 0x9c, 0xd7, 0x39, 0xe5, 0x3d, 0xdd, 0x98, 0xd7, 0x59, 0xdd, 0x2b, 0xe7, 0x3f, 0xa5,
	0x3d, 0x55, 0x39, 0xf2, 0x5d, 0x1a, 0x78, 0x8d, 0xdd, 0xd4, 0x17, 0xad, 0x6d, 0x5a, 0xcb, 0xf7,
	0xfc, 0xd4, 0x1e, 0xb1, 0x8f, 0x00, 0xe9, 0xad, 0xb1, 0x58, 0x51, 0xb3, 0x67, 0x1b, 0x9b, 0x3d,
	0x70, 0xb3, 0x77, 0x7e, 0x2b, 0x94, 0xb9, 0xbf, 0x31, 0x73, 0xed, 0x75, 0x1b, 0x4b, 0xdb, 0x2c,
	0x43, 0x63, 0xf8, 0x73, 0xba, 0x83, 0x0e, 0x1e, 0xff, 0xd9, 0x81, 0x3e, 0xdd, 0x1f, 0x3b, 0x81,
	0xd0, 0xdf, 0xc6, 0xa3, 0x8a, 0xa9, 0xd5, 0xb2, 0x2e, 0xbe, 0x8a, 0xb2, 0xc5, 0xe8, 0x71, 0xbf,
	0x13, 0xa5, 0x4a, 0xd2, 0x0e, 0x9f, 0xb0, 0x39, 0x0c, 0x13, 0x2c, 0x51, 0x18, 0xdc, 0xaa, 0xcc,
	0x12, 0xf6, 0xce, 0x6b, 0x69, 0xa5, 0x28, 0xe5, 0x2f, 0xa4, 0x33, 0xde, 0xa6, 0xda, 0x27, 0xe8,
	0x2d, 0x55, 0xb1, 0x55, 0x89, 0x0f, 0xb0, 0xbb, 0x90, 0xf5, 0x83, 0xf7, 0x40, 0xec, 0xfe, 0x69,
	0xec, 0xe2, 0xff, 0xa7, 0x5e, 0x0f, 0x88, 0x7d, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x04, 0x01,
	0x63, 0x17, 0xe6, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GcronClient is the client API for Gcron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GcronClient interface {
	// Lock remote lock based on (HOSTNAME+USERNAME+UID) or Custom Lock Name
	Lock(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	// Release release lock based on (HOSTNAME+USERNAME+UID) or Custom Lock Name
	Release(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	InitializeTask(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	Log(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	FinializeTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
}

type gcronClient struct {
	cc grpc.ClientConnInterface
}

func NewGcronClient(cc grpc.ClientConnInterface) GcronClient {
	return &gcronClient{cc}
}

func (c *gcronClient) Lock(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.gcron/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcronClient) Release(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.gcron/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcronClient) InitializeTask(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.gcron/InitializeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcronClient) Log(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.gcron/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcronClient) FinializeTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.gcron/FinializeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcronServer is the server API for Gcron service.
type GcronServer interface {
	// Lock remote lock based on (HOSTNAME+USERNAME+UID) or Custom Lock Name
	Lock(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error)
	// Release release lock based on (HOSTNAME+USERNAME+UID) or Custom Lock Name
	Release(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error)
	InitializeTask(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error)
	Log(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error)
	FinializeTask(context.Context, *Task) (*wrappers.BoolValue, error)
}

// UnimplementedGcronServer can be embedded to have forward compatible implementations.
type UnimplementedGcronServer struct {
}

func (*UnimplementedGcronServer) Lock(ctx context.Context, req *wrappers.StringValue) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedGcronServer) Release(ctx context.Context, req *wrappers.StringValue) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (*UnimplementedGcronServer) InitializeTask(ctx context.Context, req *wrappers.StringValue) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeTask not implemented")
}
func (*UnimplementedGcronServer) Log(ctx context.Context, req *wrappers.StringValue) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (*UnimplementedGcronServer) FinializeTask(ctx context.Context, req *Task) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinializeTask not implemented")
}

func RegisterGcronServer(s *grpc.Server, srv GcronServer) {
	s.RegisterService(&_Gcron_serviceDesc, srv)
}

func _Gcron_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcronServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gcron/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcronServer).Lock(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gcron_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcronServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gcron/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcronServer).Release(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gcron_InitializeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcronServer).InitializeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gcron/InitializeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcronServer).InitializeTask(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gcron_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcronServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gcron/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcronServer).Log(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gcron_FinializeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcronServer).FinializeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gcron/FinializeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcronServer).FinializeTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gcron_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gcron",
	HandlerType: (*GcronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Gcron_Lock_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Gcron_Release_Handler,
		},
		{
			MethodName: "InitializeTask",
			Handler:    _Gcron_InitializeTask_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Gcron_Log_Handler,
		},
		{
			MethodName: "FinializeTask",
			Handler:    _Gcron_FinializeTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcron.proto",
}
