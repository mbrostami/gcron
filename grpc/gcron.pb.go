// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gcron.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	Latitude             int32    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd548e04c98879c7, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
type Feature struct {
	// The name of the feature.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The point where the feature is detected.
	Location             *Point   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd548e04c98879c7, []int{1}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "grpc.Point")
	proto.RegisterType((*Feature)(nil), "grpc.Feature")
}

func init() {
	proto.RegisterFile("gcron.proto", fileDescriptor_fd548e04c98879c7)
}

var fileDescriptor_fd548e04c98879c7 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4f, 0x2e, 0xca,
	0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f, 0x2a, 0x48, 0x56, 0x72, 0xe4,
	0x62, 0x0d, 0xc8, 0xcf, 0xcc, 0x2b, 0x11, 0x92, 0xe2, 0xe2, 0xc8, 0x49, 0x2c, 0xc9, 0x2c, 0x29,
	0x4d, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf3, 0x85, 0x64, 0xb8, 0x38, 0x73,
	0xf2, 0xf3, 0xd2, 0x21, 0x92, 0x4c, 0x60, 0x49, 0x84, 0x80, 0x92, 0x1b, 0x17, 0xbb, 0x5b, 0x6a,
	0x62, 0x49, 0x69, 0x51, 0xaa, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x2e, 0xc4, 0x00, 0xce, 0x20,
	0x30, 0x5b, 0x48, 0x9d, 0x8b, 0x23, 0x27, 0x3f, 0x39, 0xb1, 0x24, 0x33, 0x3f, 0x0f, 0xac, 0x97,
	0xdb, 0x88, 0x5b, 0x0f, 0x64, 0xb5, 0x1e, 0xd8, 0xde, 0x20, 0xb8, 0xa4, 0x91, 0x31, 0x17, 0x2b,
	0xd8, 0x7d, 0x42, 0x5a, 0x5c, 0x5c, 0xee, 0xa9, 0x25, 0x30, 0x33, 0x91, 0x55, 0x4b, 0xf1, 0x42,
	0x38, 0x50, 0x39, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x67, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x74, 0x15, 0x1e, 0xdb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GcronClient is the client API for Gcron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GcronClient interface {
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
}

type gcronClient struct {
	cc grpc.ClientConnInterface
}

func NewGcronClient(cc grpc.ClientConnInterface) GcronClient {
	return &gcronClient{cc}
}

func (c *gcronClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/grpc.gcron/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcronServer is the server API for Gcron service.
type GcronServer interface {
	GetFeature(context.Context, *Point) (*Feature, error)
}

// UnimplementedGcronServer can be embedded to have forward compatible implementations.
type UnimplementedGcronServer struct {
}

func (*UnimplementedGcronServer) GetFeature(ctx context.Context, req *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}

func RegisterGcronServer(s *grpc.Server, srv GcronServer) {
	s.RegisterService(&_Gcron_serviceDesc, srv)
}

func _Gcron_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcronServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gcron/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcronServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gcron_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gcron",
	HandlerType: (*GcronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _Gcron_GetFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcron.proto",
}
